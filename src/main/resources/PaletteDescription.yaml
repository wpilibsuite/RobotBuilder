## This file describes the palette for RobotBuilder. The format is
## YAML 1.1 (http://www.yaml.org/) pre-processed with Velocity macros
## (velocity.apache.org). This file is broken into three sections:
##
## - The macros for generating common types.
##
##   The macros are very simple, they define a simple template that
##   gets substituted where they are called, with substitution
##   where-ever the dollar sign sigil appears before a variable
##   name. For more information, see:
##   velocity.apache.org/engine/devel/user-guide.html#Velocimacro_Miscellany
##
##   NOTE: Be very careful about white space and macros, YAML is white
##   space sensitive.
##
##   They are defined as:
##   #macro( macroname $arg1 $arg2 ... $argN )
##      [body]
##   #end
##
##   They are called as:
##   #macroname($var1 $var2 ... $varN)
##
## - The validators for ensuring that certain properties are unique.
##
##   The validators control if and how a property is validated. The
##   only currently supported validator type is unique, though more
##   will be added in the future.
##
##   They are define as:
##   - !Validator
##     name: A name for this validator, must be unique among validators.
##     type: Unique is currently the only  supported type
##     fields: A list of fields that the combination of should be unique.
##
## - The palette
##
##   The palette is broken into multiple sections. Each section
##   contains a list of components that should be displayed in that
##   section.
##
##   A component is defined as:
##   - !Component
##     name: The unique name of this component
##     type: The type of this component
##     supports: Optional. A map of the types supported and the number
##               supported. -1 denotes unlimited.
##     help: Tooltip helf for this component, it shows up when the
##           mouse hovers.
##     properties: A list of properties
##
##   A property is one of:
##   - !StringProperty
##     name: The name of this property, should be unique within this component
##     validator: Optional. The validator that should be used to
##                validate this property.
##     default: The default value when no other is presented.
##   - !BooleanProperty
##     name: The name of this property, should be unique within this component
##     validator: Optional. The validator that should be used to
##                validate this property.
##     default: The default value when no other is presented.
##   - !DoubleProperty
##     name: The name of this property, should be unique within this component
##     validator: Optional. The validator that should be used to
##                validate this property.
##     default: The default value when no other is presented.
##   - !FileProperty
##     name: The name of this property, should be unique within this component
##     validator: Optional. The validator that should be used to
##                validate this property.
##     default: The default value when no other is presented.
##     extension: The extension at the end of this file without the '.'
##     folder: Whether or not to select folders instead of files
##   - !ChoicesProperty
##     name: The name of this property, should be unique within this component
##     validator: Optional. The validator that should be used to
##                validate this property.
##     default: The default value when no other is presented.
##     choices: List of choices to present to the user.
##   - !ChiledSelectioProperty
##     name: The name of this property, should be unique within this component
##     validator: Optional. The validator that should be used to
##                validate this property.
##     default: The default value when no other is presented.
##     type: Type of the child to select.
##   - !TypeSelectioProperty
##     name: The name of this property, should be unique within this component
##     validator: Optional. The validator that should be used to
##                validate this property.
##     default: The default value when no other is presented.
##     type: Type of component to select.


## Macros:
#macro( AnalogInput $Name )
          - !ChoicesProperty
            name: $Name Channel (Analog)
            choices: ["0", "1", "2", "3", "4", "5", "6", "7"]
            validators: [AnalogInput]
            default: "0"
#end
#macro( DigitalChannel $Name )
          - !ChoicesProperty
            name: $Name Channel (Digital)
            validators: [DigitalChannel]
            choices: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"]
            default: "0"
#end
#macro( PWMOutput $Name )
          - !ChoicesProperty
            name: $Name Channel (PWM)
            validators: [PWMOutput]
            choices: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"]
            default: "0"
#end
#macro( RelayOutput $Name )
          - !ChoicesProperty
            name: $Name Channel (Relay)
            validators: [RelayOutput]
            choices: ["0", "1", "2", "3"]
            default: "0"
#end
#macro( AnalogOutput $Name )
          - !ChoicesProperty
            name: $Name Channel (AnalogOutput)
            validators: [AnalogOutput]
            choices: ["0", "1"]
            default: "0"
#end
#macro( Button $Name )
          - !TypeSelectionProperty
              name: $Name Command
              type: Command
              validators: [TypeDropdownSelected]
              default: None
          - !Parameters
            name: $Name Parameters
          - !ChoicesProperty
            name: $Name When to Run
            choices: [onTrue, onFalse, whileTrue, whileFalse, toggleOnTrue, toggleOnFalse]
            default: onTrue
          - !BooleanProperty
            name: Add Timeout
            default: false
          - !PositiveDoubleProperty
            name: Timeout
            default: 0
          - !ChoicesProperty
            name: Interruptible
            choices: [CancelSelf, CancelIncoming]
            default: CancelSelf
#end
#macro( Solenoid $Name )
          - !ChoicesProperty
              name: $Name Module (Solenoid)
              validators: [Solenoid]
              choices: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]
              default: "0"
          - !ChoicesProperty
            name: $Name Channel (Solenoid)
            validators: [Solenoid]
            choices: ["0", "1", "2", "3", "4", "5", "6", "7"]
            default: "0"
          - !ChoicesProperty
            name: $Name Module Type (Solenoid)
            choices: ["CTREPCM", "REVPH"]
            default: "CTREPCM"
#end

Validators:
  - !DistinctValidator
    name: RobotDrive2
    fields: ["Left Motor", "Right Motor"]
  - !DistinctValidator
    name: RobotDrive4
    fields: ["Left Front Motor", "Left Rear Motor", "Right Front Motor", "Right Rear Motor"]
  - !DistinctValidator
    name: MotorControllerGroup
    fields: ["MotorController1", "MotorController2", "MotorController3", "MotorController4"]
  - !ExistsValidator
    name: ChildDropdownSelected
    ignore: [null, "null", "", 0, 1, 2, 3, "No Choices Available", "None"]
    "error": "You must select a component of the valid type beneath this item. If no options exist, drag one under this component."
  - !ExistsValidator
    name: TypeDropdownSelected
    ignore: [null, "null", "", 0, 1, 2, 3, "No Choices Available", "None"]
    "error": "You must select a component of the valid type. If no options exist, create a new component of the right type."
  - !ExistsValidator
    name: TypeDropdownSelectedNoneOk
    ignore: [null, "null", "", 0, 1, 2, 3, "No Choices Available"]
    "error": "You must select a component of the valid type. If no options exist, create a new component of the right type."
  - !UniqueValidator
    name: AnalogInput
    fields: [Channel (Analog)]
  - !UniqueValidator
    name: DigitalChannel
    fields: [Channel (Digital)]
  - !UniqueValidator
    name: PWMOutput
    fields: [Channel (PWM)]
  - !UniqueValidator
    name: CANID
    fields: [CAN ID]
  - !UniqueValidator
    name: Joystick
    fields: [Number]
  - !UniqueValidator
    name: RelayOutput
    fields: [Channel (Relay)]
  - !UniqueValidator
    name: Solenoid
    fields: [Channel (Solenoid), Module (Solenoid)]
  - !UniqueValidator
    name: CompID
    fields: [Module ID]
  - !ListValidator
    name: List
  - !UniqueValidator
    name: AnalogOutput
    fields: [Channel (AnalogOutput)]

Palette:
  - Hidden:
      - !Component
        name: Robot
        type: Robot
        supports: {Subsystems: 1, OI: 1, Commands: 1}
        help: Your Robot!
        properties:
          - !TypeSelectionProperty
            name: Autonomous Command
            type: Command
            default: None
          - !Parameters
            name: Autonomous command parameters
          - !TeamNumberProperty
            name: Team Number
            default: 0
          - !BooleanProperty
            name: Use Default Java Package
            default: true
          - !StringProperty
            name: Java Package
            default: "frc.robot"
          - !FileProperty
            name: Export Directory
            extension: null
            folder: true
            default: "${home}FRCProjects"
          - !BooleanProperty
            name: Export Subsystems
            default: true
          - !BooleanProperty
            name: Export Commands
            default: true
          - !FileProperty
            name: Wiring file location
            folder: true
            default: "${home}"
          - !BooleanProperty
            name: Desktop Support
            default: false
      - !Component
        name: Subsystems
        type: Subsystems
        supports: {Subsystem: -1}
        help: The subsystems that make up your robot.
        properties: []
      - !Component
        name: OI
        type: OI
        supports: {Button: -1, Joystick: -1, OI Input: -1, OI Output: -1}
        help: Your operator interface! Maps the joysticks and other controls to commands.
        properties: []
      - !Component
        name: Commands
        type: Commands
        supports: {Command: -1}
        help: The commands that control what actions your robot performs.
        properties: []

  - Subsystems:
      - !Component
        name: Subsystem
        type: Subsystem
        supports: {Sensor: -1, Actuator: -1, Controller: -1, PIDSource: -1, PIDOutput: -1}
        help: A functional part of your robot that groups the sensors and actuators together.
        properties:
          - !ConstantsProperty
            name: Constants
            default: []
          - !TypeSelectionProperty
            name: Default Command
            type: Command
            default: None
          - !Parameters
            name: Default command parameters
          - !BooleanProperty
            name: Send to SmartDashboard
            default: false
      - !Component
        name: PID Subsystem
        type: Subsystem
        supports: {Sensor: -1, Actuator: -1, Controller: -1, Pneumatic: -1, PIDSource: -1, PIDOutput: -1}
        help: A PID Subsystem is a subsystem that uses a PID control loop.
        properties:
          - !ConstantsProperty
            name: Constants
            default: []
          - !TypeSelectionProperty
            name: Default Command
            type: Command
            default: None
          - !Parameters
            name: Default command parameters
          - !BooleanProperty
            name: Send to SmartDashboard
            default: false
          - !ChildSelectionProperty
            name: Input
            type: PIDSource
            validators: [ChildDropdownSelected]
            default: 0
          - !ChildSelectionProperty
            name: Output
            type: PIDOutput
            validators: [ChildDropdownSelected]
            default: 0
          - !PositiveDoubleProperty
            name: P
            default: 1
          - !PositiveDoubleProperty
            name: I
            default: 0
          - !PositiveDoubleProperty
            name: D
            default: 0
          - !DoubleProperty
            name: F
            default: 0
          - !DoubleProperty
            name: Tolerance
            default: 0.2
##          - !DoubleProperty
##            name: Period
##            default: .02
          - !BooleanProperty
            name: Continuous
            default: false
          - !BooleanProperty
            name: Limit Input
            default: false
          - !DoubleProperty
            name: Minimum Input
            default: 0
          - !DoubleProperty
            name: Maximum Input
            default: 5
          - !BooleanProperty
            name: Limit Output
            default: false
          - !DoubleProperty
            name: Minimum Output
            default: -1
          - !DoubleProperty
            name: Maximum Output
            default: 1

  - Controllers:
      - !Component
        name: PID Controller
        type: Controller
        supports: {PIDSource: 1, PIDOutput: 1}
        help: PID controllers allow control of an actuator based off of feedback from a sensor.
        properties:
          - !ChildSelectionProperty
            name: Input
            type: PIDSource
            validators: [ChildDropdownSelected]
            default: 0
          - !ChildSelectionProperty
            name: Output
            type: PIDOutput
            validators: [ChildDropdownSelected]
            default: 0
          - !PositiveDoubleProperty
            name: P
            default: 1
          - !PositiveDoubleProperty
            name: I
            default: 0
          - !PositiveDoubleProperty
            name: D
            default: 0
          - !DoubleProperty
            name: Tolerance
            default: 0.2
          - !DoubleProperty
            name: Period
            default: .02
          - !BooleanProperty
            name: Continuous
            default: false
          - !DoubleProperty
            name: Minimum Input
            default: 0
          - !DoubleProperty
            name: Maximum Input
            default: 5
          - !BooleanProperty
            name: Send to SmartDashboard
            default: false
      - !Component
        name: Differential Drive
        type: Controller
        supports: {PIDOutput: 2}
        help: RobotDrive handles tank and arcade drives
        properties:
          - !ChildSelectionProperty
            name: Left Motor
            type: PIDOutput
            validators: [RobotDrive2, ChildDropdownSelected]
            default: 0
          - !ChildSelectionProperty
            name: Right Motor
            type: PIDOutput
            validators: [RobotDrive2, ChildDropdownSelected]
            default: 1
          - !DoubleProperty
            name: Maximum Output
            default: 1
          - !BooleanProperty
            name: Safety Enabled
            default: true
          - !DoubleProperty
            name: Safety Expiration Time
            default: .1
      - !Component
        name: Mecanum Drive
        type: Controller
        supports: {PIDOutput: 4}
        help: Controller for Mecanum Drive Trains
        properties:
          - !ChildSelectionProperty
            name: Left Front Motor
            type: PIDOutput
            validators: [RobotDrive4, ChildDropdownSelected]
            default: 0
          - !ChildSelectionProperty
            name: Left Rear Motor
            type: PIDOutput
            validators: [RobotDrive4, ChildDropdownSelected]
            default: 1
          - !ChildSelectionProperty
            name: Right Front Motor
            type: PIDOutput
            validators: [RobotDrive4, ChildDropdownSelected]
            default: 2
          - !ChildSelectionProperty
            name: Right Rear Motor
            type: PIDOutput
            validators: [RobotDrive4, ChildDropdownSelected]
            default: 3
          - !DoubleProperty
            name: Maximum Output
            default: 1
          - !BooleanProperty
            name: Safety Enabled
            default: true
          - !DoubleProperty
            name: Safety Expiration Time
            default: .1

  - Sensors:
      - !Component
        name: AnalogGyro
        type: PIDSource
        help: An analog angular rate sensor.
        properties:
          - !ChoicesProperty
            name: Input Channel (Analog)
            choices: ["0", "1"]
            validators: [AnalogInput]
            default: "0"
          - !DoubleProperty
            name: Sensitivity
            default: 0.007
      - !Component
        name: AnalogAccelerometer
        type: PIDSource
        help: An analog acceleration sensor.
        properties:
          #AnalogInput("Input")
          - !DoubleProperty
            name: Volts Per G
            default: "0"
          - !DoubleProperty
            name: Zero G Volts
            default: 2.5
      - !Component
        name: Quadrature Encoder
        type: PIDSource
        help: A digital sensor that can be used to calculate the speed and distance rotated.
        properties:
          #DigitalChannel("Channel A")
          #DigitalChannel("Channel B")
          - !BooleanProperty
            name: Reverse Direction
            default: false
          - !ChoicesProperty
            name: Encoding Type
            choices: [k4X, k2X, k1X]
            default: "k4X"
          - !DoubleProperty
            name: Distance Per Pulse
            default: 1
          - !ChoicesProperty
            name: PID Source
            choices: [kDisplacement, kRate]
            default: "kRate"
      - !Component
        name: Indexed Encoder
        type: PIDSource
        help: A digital sensor that can be used to calculate the speed and distance rotated.
        properties:
          #DigitalChannel("Channel A")
          #DigitalChannel("Channel B")
          #DigitalChannel("Index")
          - !BooleanProperty
            name: Reverse Direction
            default: false
          - !DoubleProperty
            name: Distance Per Pulse
            default: 1
          - !ChoicesProperty
            name: PID Source
            choices: [kDisplacement, kRate]
            default: "kRate"
          - !ChoicesProperty
            name: Indexing Type
            choices: [ResetWhileHigh, kResetWhileLow, kResetOnFallingEdge, kResetOnRisingEdge]
            default: "kResetOnRisingEdge"
      - !Component
        name: Analog Potentiometer
        type: PIDSource
        help: An rotational analog sensor that can be used to determine the position of an axle.
        properties:
          #AnalogInput("Input")
          - !DoubleProperty
            name: Full Range
            default: 1
          - !DoubleProperty
            name: Offset
            default: 0
      - !Component
        name: Analog Input
        type: PIDSource
        help: A generic analog input.
        properties:
          #AnalogInput("Input")
      - !Component
        name: Limit Switch
        type: Sensor
        help: A digital sensor that can be used to detect presses.
        properties:
          #DigitalChannel("Input")
      - !Component
        name: Digital Input
        type: Sensor
        help: A generic digital input.
        properties:
          #DigitalChannel("Input")
      - !Component
        name: Ultrasonic
        type: PIDSource
        help: A range finding sensor based off of sound reflections using a digital input and output.
        properties:
          #DigitalChannel("Ping")
          #DigitalChannel("Echo")
      - !Component
        name: PowerDistribution
        type: Sensor
        help: Measure the current and voltage from a Power Distribution Module.
        properties:
          - !ChoicesProperty
            name: CAN ID
            choices: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]
            default: "0"
          - !ChoicesProperty
            name: Module Type
            choices: ["Automatic", "CTRE", "Rev"]
            default: "Automatic"

  - Actuators:
      - !Component
        name: Motor Controller
        type: PIDOutput
        help: A PWM motor controller that allows you to set the speed of a motor.
        properties:
          - !ChoicesProperty
            name: Type
            choices: ["Talon", "VictorSP", "PWMTalonSRX", "Spark", "PWMVictorSPX", "PWMSparkMax", "PWMTalonFX", "PWMVenom", "PWMSparkFlex", "Koors40"]
            default: "PWMVictorSPX"
          #PWMOutput("Output")
          - !BooleanProperty
            name: Inverted
            default: false
          - !TypeSelectionProperty
            name: Follow
            type: PIDOutput
            validators: [TypeDropdownSelectedNoneOk]
            default: None
      - !Component
        name: Servo
        type: Actuator
        help: A controllable motor; typically has a limited rotation.
        properties:
          #PWMOutput("Output")
      - !Component
        name: Digital Output
        type: Actuator
        help: A simple on/off output.
        properties:
          #DigitalChannel("Output")
      - !Component
        name: Spike
        type: Actuator
        help: A motor controller that can run forwards/backwards/stopped.
        properties:
          #RelayOutput("Output")
      - !Component
        name: Analog Output
        type: Actuator
        help: An Analog Output.
        properties:
          #AnalogOutput("Output")

  - Pneumatics:
      - !Component
        name: Compressor
        type: Actuator
        help: A pneumatic compressor on your robot, connected to a Pneumatics Module.
        properties:
          - !ChoicesProperty
            name: Module ID
            validators: [CompID]
            choices: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]
            default: "0"
          - !ChoicesProperty
            name: Module Type
            choices: ["CTREPCM", "REVPH"]
            default: "CTREPCM"
      - !Component
        name: Solenoid
        type: Actuator
        help: A linear actuator used to open and close valves that runs off of a Pneumatics Module.
        properties:
          #Solenoid("Output")
      - !Component
        name: Relay Solenoid
        type: Actuator
        help: A linear actuator used to open and close valves that runs off of a relay.
        properties:
          #RelayOutput("Output")
      - !Component
        name: Double Solenoid
        type: Actuator
        help: A double-action linear actuator used to open and close valves that runs off of a pneumatics module.
        properties:
          #Solenoid("Forward")
          - !ChoicesProperty
            name: Reverse Channel (Solenoid)
            choices: ["0", "1", "2", "3", "4", "5", "6", "7"]
            default: "0"

  - OI:
      - !Component
        name: Joystick
        type: Joystick
        supports: {Joystick Button: -1, POV Button: -1}
        help: A joystick that drivers can use as input.
        properties:
          - !ChoicesProperty
            name: Number
            choices: ["0", "1", "2", "3", "4", "5"]
            validators: [Joystick]
            default: 1
      - !Component
        name: Joystick Button
        type: Joystick Button
        help: A joystick button that binds a driver action to a command.
        properties:
          - !ParentProperty
            name: Joystick
          - !ChoicesProperty
            name: Button
            choices: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32"]
            default: "1"
          #Button("")
          - !BooleanProperty
            name: Send to SmartDashboard
            default: false

      - !Component
        name: Xbox Controller
        type: Joystick
        supports: {Xbox Button: -1, POV Button: -1}
        help: An Xbox Controller that drivers can use as input.
        properties:
          - !ChoicesProperty
            name: Number
            choices: ["0", "1", "2", "3", "4", "5"]
            validators: [Joystick]
            default: 1
      - !Component
        name: Xbox Button
        type: Xbox Button
        help: An Xbox Controller button that binds a driver action to a command.
        properties:
          - !ParentProperty
            name: Joystick
          - !ChoicesProperty
            name: Button
            choices: ["A","B","X","Y","Back","Start","LeftBumper","RightBumper","LeftStick","RightStick"]
            default: "A"
          #Button("")
          - !BooleanProperty
            name: Send to SmartDashboard
            default: false
      - !Component
        name: PS4 Controller
        type: Joystick
        supports: {PS4 Button: -1, POV Button: -1}
        help: A PS4 Controller that drivers can use as input.
        properties:
          - !ChoicesProperty
            name: Number
            choices: ["0", "1", "2", "3", "4", "5"]
            validators: [Joystick]
            default: 1
      - !Component
        name: PS4 Button
        type: PS4 Button
        help: A PS4 Controller button that binds a driver action to a command.
        properties:
          - !ParentProperty
            name: Joystick
          - !ChoicesProperty
            name: Button
            choices: ["Square", "Cross", "Circle", "Triangle", "L1", "R1", "L2", "R2", "Share", "Options", "L3", "R3", "PS", "Touchpad"]
            default: "Square"
          #Button("")
          - !BooleanProperty
            name: Send to SmartDashboard
            default: false
      - !Component
        name: POV Button
        type: POV Button
        help: A POV button that binds a driver action to a command.
        properties:
          - !ParentProperty
            name: Joystick
          - !ChoicesProperty
            name: POVNumber
            choices: ["0", "1", "2", "3", "4", "5"]
            default: 0
          - !ChoicesProperty
            name: Angle
            choices: ["0", "45", "90", "135", "180", "225", "270", "315"]
            default: "0"
          #Button("")
          - !BooleanProperty
            name: Send to SmartDashboard
            default: false
  - Commands:
      - !Component
        name: Command
        type: Command
        help: A command specifies an action that the robot can perform.
        properties:
          - !TypeSelectionProperty
            name: Requires
            type: Subsystem
            default: None
          - !BooleanProperty
            name: Button on SmartDashboard
            default: true
          - !Parameters
            name: Parameters
            default: []
          - !ParameterSet
            name: Parameter presets
            default: []
          - !BooleanProperty
            name: Run When Disabled
            default: false
          - !BooleanProperty
            name: Autonomous Selection
            default: false
      - !Component
        name: Sequential Command Group
        type: Command
        help: A group of commands set to run together in a prescribed way.
        properties:
          - !TypeSelectionProperty
            name: Requires
            type: Subsystem
            default: None
          - !BooleanProperty
            name: Button on SmartDashboard
            default: true
          - !Parameters
            name: Parameters
            default: []
          - !ParameterSet
            name: Parameter presets
            default: []
          - !BooleanProperty
            name: Run When Disabled
            default: false
          - !BooleanProperty
            name: Autonomous Selection
            default: false
      - !Component
        name: PID Command
        type: Command
        help: A command that uses a PID controller to perform its desired action.
        properties:
          - !TypeSelectionProperty
            name: Requires
            type: Subsystem
            default: "None"
          - !BooleanProperty
            name: Button on SmartDashboard
            default: true
          - !Parameters
            name: Parameters
            default: {}
          - !ParameterSet
            name: Parameter presets
            default: []
          - !TypeSelectionProperty
            name: Input
            type: PIDSource
            validators: [TypeDropdownSelected]
            default: "None"
          - !TypeSelectionProperty
            name: Output
            type: PIDOutput
            validators: [TypeDropdownSelected]
            default: "None"
          - !PositiveDoubleProperty
            name: P
            default: 1
          - !PositiveDoubleProperty
            name: I
            default: 0
          - !PositiveDoubleProperty
            name: D
            default: 0
          - !DoubleProperty
            name: Tolerance
            default: 0.2
          - !DoubleProperty
            name: Period
            default: .02
          - !BooleanProperty
            name: Continuous
            default: false
          - !BooleanProperty
            name: Limit Input
            default: false
          - !DoubleProperty
            name: Minimum Input
            default: 0
          - !DoubleProperty
            name: Maximum Input
            default: 5
          - !BooleanProperty
            name: Limit Output
            default: false
          - !DoubleProperty
            name: Minimum Output
            default: -1
          - !DoubleProperty
            name: Maximum Output
            default: 1
          - !BooleanProperty
            name: Autonomous Selection
            default: false
      - !Component
        name: Setpoint Command
        type: Command
        help: A command that moves a PID subsystem to a predetermined setpoint.
        properties:
          - !ComponentSelectionProperty
            name: Requires
            validators: [TypeDropdownSelected]
            componentName: PID Subsystem
            default: None
          - !BooleanProperty
            name: Button on SmartDashboard
            default: true
          - !Parameters
            name: Parameters
            value:
            - !!robotbuilder.data.properties.ParameterDescriptor {name: setpoint, type: double}
          - !ParameterSet
            name: Parameter presets
            default: []
          - !BooleanProperty
            name: Autonomous Selection
            default: false
      - !Component
        name: Wait Command
        type: Command
        help: A command specifies an action that the robot can perform and finishes after a timeout.
        properties:
          - !TypeSelectionProperty
            name: Requires
            type: Subsystem
            default: None
          - !BooleanProperty
            name: Button on SmartDashboard
            default: true
          - !Parameters
            name: Parameters
            value:
            - !!robotbuilder.data.properties.ParameterDescriptor {name: timeout, type: double}
          - !ParameterSet
            name: Parameter presets
            default: []
          - !BooleanProperty
            name: Run When Disabled
            default: false
          - !BooleanProperty
            name: Autonomous Selection
            default: false
      - !Component
        name: Instant Command
        type: Command
        help: A command specifies an action that the robot can perform and finishes instantly.
        properties:
          - !TypeSelectionProperty
            name: Requires
            type: Subsystem
            default: None
          - !BooleanProperty
            name: Button on SmartDashboard
            default: true
          - !Parameters
            name: Parameters
            default: []
          - !ParameterSet
            name: Parameter presets
            default: []
          - !BooleanProperty
            name: Run When Disabled
            default: false
          - !BooleanProperty
            name: Autonomous Selection
            default: false
      - !Component
        name: Conditional Command
        type: Command
        help: A Command that chooses between two Commands
        properties:
          - !TypeSelectionProperty
            name: Requires
            type: Subsystem
            default: None
          - !TypeSelectionProperty
            name: On True Command
            type: Command
            default: None
          - !TypeSelectionProperty
            name: On False Command
            type: Command
            default: None
          - !Parameters
            name: Parameters
            default: []
          - !ParameterSet
            name: Parameter presets
            default: []
          - !BooleanProperty
            name: Button on SmartDashboard
            default: true
          - !BooleanProperty
            name: Run When Disabled
            default: false
          - !BooleanProperty
            name: Autonomous Selection
            default: false
