## This file describes the export from RobotBuilder to C++. The
## format is YAML 1.1 (http://www.yaml.org/) with instructions that
## are post-processed with Velocity (velocity.apache.org).
##
## This is the actual exporter for C++, but also serves as a good
## example of a complicated exporter.
##
## Name: The name of this exporter to be displayed in menus.
## Type: The type, this will affect where it is displayed.
## Toolbar: Whether or not it displays on the toolbar by default.
## Files: A YAML file pre-processed by velocity that describes which
##     files to export and how.
## Begin Modification: A string that indicates the beginning of an
##     area that will be modified and replaced by auto-generated code.
## End Modification: A string that indicates the end of an area
##     that will be modified and replaced by auto-generated code.
## Required Properties: A list of robot properties that must be filled
##     out for this export to actually begin export. If these are not
##     filled out, the export alerts the user and stops.
## Vars: A map of variable names to values that are available for the
##     entire export.
## Macros: A file containing the velocity macros for this export.
##
## Defaults: A map of default names to their instruction sets. The
##     instruction sets are a map of instruction names to instructions
##     that may contain velocity templating. These defaults are used
##     if component instructions do not specify a specific
##     instruction.
##
## Instructions: A map of palette components to their defaults and
##     instruction sets. The defaults are a comma-separated string
##     with the highest priority default first. The instructions
##     themselves vary from language to language, in the C++
##     exporter:
##
##     - Export: The export instruction specifies the file to export
##           this component to.
##     - Import: The C++ include so that this component is properly
##           included in the generated C++ file
##     - Declaration: The declaration to declare a variable
##           representing this component in the header.
##     - Construction: The constructor to create this component in the cpp
##           file.
##     - LiveWindow: Put this component on the livewindow properly.
##     - Extra: Extra configuration for after the constructor is done.
##     - ClassName: The C++ class name of this object.

Name: C++
Type: Code
Toolbar: true
Files: files.yaml
Begin Modification: // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
End Modification: // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
Required Properties:
  - Export Directory

Vars:
  project_lang: cpp
  team_number: ${robot.getProperty('Team Number').getValue()}
  robot_name: ${robot.getName()}
  world_file: ${robot.getProperty('Simulation World File').getValue()}
  project: ${robot.getPropertyAbsolutePath('Export Directory')}$file_separator$robot_name
Macros: macros.vm

Post Export Action: "#Message:You have successfully exported. You can now open the project in VS Code and extend the generated code."

Instruction Names: ["Export", "Import", "Declaration", "Construction", "LiveWindow", "Extra", "Prototype", "Function", "PID", "ClassName"]

Defaults:
  Component:
    Export: "RobotMap"
    Declaration: "frc::${ClassName}* #variable($Name);"
    Import: "\\#include <frc/${ClassName}.h>"
  CustomComponent:
    Export: "RobotMap"
    Import: "\\#include \"Custom/${ClassName}.h\""
    Declaration: "std::shared_ptr<${ClassName}> #variable($Name);"
  None:
    Export: ""
    Import: ""
    Declaration: ""
    Construction: ""
    LiveWindow: ""
    Extra: ""
    Prototype: ""
    Function: ""
    PID: "#variable($Short_Name).PIDGet()"
    ClassName: ""
  AnalogInput:
    Declaration: "frc::${ClassName} #variable($Name){${Input_Channel_Analog}};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
    PID: "#variable($Short_Name).GetAverageVoltage()"
  AnalogPotentiometer:
    Declaration: "frc::${ClassName} #variable($Name){${Input_Channel_Analog}, ${Full_Range}, ${Offset}};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
    PID: "#variable($Short_Name).Get()"
  DigitalInput:
    Declaration: "frc::${ClassName} #variable($Name){${Input_Channel_Digital}};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
  PWMOutput:
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
  RelayOutput:
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
  AnalogOutput:
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
  SolenoidOutput:
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
  OI:
    Export: "OI"
    Import: "\\#include <frc/${ClassName}.h>"
  Button:
    Extra:  "#if(\"$Command\" != \"None\")#variable($Name)->${When_to_Run.substring(0,1).toUpperCase()}${When_to_Run.substring(1)}(#command_instantiation($Command $Parameters));#end"
  Command:
    Export: "OI"
    Import: "\\#include \"commands/#class($Short_Name).h\""

Instructions:
  Robot:
    Defaults: "None"
  Subsystems:
    Defaults: "None"
  OI:
    Defaults: "None"
  Commands:
    Defaults: "None"
  Subsystem:
    Defaults: "None"
    Export: "RobotContainer"
    Import: "\\#include \"subsystems/#class($Short_Name).h\""
    ClassName: "frc2::SubsystemBase"
  PID Subsystem:
    Defaults: "None"
    Export: "RobotContainer"
    Import: "\\#include \"subsystems/#class($Short_Name).h\""
    ClassName: "frc2::PIDSubsystem"

  PID Controller:
    Defaults: "Component,None"
    Import: "\\#include <frc/controller/PIDController.h>"
    ClassName: "PIDController"
    Declaration: "frc::${ClassName} #variable($Name){$P, $I, $D};"
    Extra: >
      #if($Continuous)
              #variable($Short_Name).EnableContinuousInput(${Minimum_Input}, ${Maximum_Input});
      #end
      #variable($Name).SetTolerance(${Tolerance});
      #if($Send_to_SmartDashboard)

          frc::SmartDashboard::PutData("${Name}", &#variable($Name));#end

    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"

  Differential Drive:
    Defaults: "Component,None"
    ClassName: "DifferentialDrive"
    Declaration: "frc::${ClassName} #variable($Name){#variable($Left_Motor), #variable($Right_Motor)};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
    Import: "\\#include <frc/drive/${ClassName}.h>"
    Extra: >
      #variable($Name).SetSafetyEnabled($Safety_Enabled);
              #variable($Name).SetExpiration(${Safety_Expiration_Time}_s);
              #variable($Name).SetMaxOutput($Maximum_Output);
  Mecanum Drive:
    Defaults: "Component,None"
    ClassName: "MecanumDrive"
    Declaration: "frc::${ClassName} #variable($Name){#variable($Left_Front_Motor), #variable($Left_Rear_Motor),
                    #variable($Right_Front_Motor), #variable($Right_Rear_Motor)};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
    Import: "\\#include <frc/drive/${ClassName}.h>"
    Extra: >
      #variable($Name).SetSafetyEnabled($Safety_Enabled);
              #variable($Name).SetExpiration(${Safety_Expiration_Time}_s);
              #variable($Name).SetMaxOutput($Maximum_Output);

  AnalogGyro:
    Defaults: "AnalogInput,Component,None"
    Declaration: "frc::${ClassName} #variable($Name){${Input_Channel_Analog}};"
    ClassName: "AnalogGyro"
    Extra: "#variable($Name).SetSensitivity(${Sensitivity});"
    PID: "#variable($Short_Name).GetAngle()"
  AnalogAccelerometer:
    Defaults: "AnalogInput,Component,None"
    Declaration: "frc::${ClassName} #variable($Name){${Input_Channel_Analog}};"
    ClassName: "AnalogAccelerometer"
    PID: "#variable($Short_Name).GetAcceleration()"
    Extra: >-
      #variable($Name).SetSensitivity(${Volts_Per_G});
      #variable($Name).SetZero(${Zero_G_Volts});
  Quadrature Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Declaration: "frc::Encoder #variable($Name){${Channel_A_Channel_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}, frc::Encoder::${Encoding_Type}};"
    PID: "#if(($PID_Source) == \"kDisplacement\") #variable($Short_Name).GetDistance()#else #variable($Short_Name).GetRate()#end"
    Extra: >-
      #variable($Name).SetDistancePerPulse(${Distance_Per_Pulse});
  Indexed Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Declaration: "frc::Encoder #variable($Name){${Channel_A_Channel_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}};"
    PID: "#if(($PID_Source) == \"kDisplacement\") #variable($Short_Name).GetDistance()#else #variable($Short_Name).GetRate()#end"
    Extra: >-
      #variable($Name).SetDistancePerPulse(${Distance_Per_Pulse});
          #variable($Name).SetIndexSource((unsigned int)${Index_Channel_Digital}, frc::Encoder::IndexingType::${Indexing_Type});
  Analog Potentiometer:
    Defaults: "AnalogPotentiometer,Component,None"
    ClassName: "AnalogPotentiometer"
  Analog Input:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogInput"
  Limit Switch:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Digital Input:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Ultrasonic:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Ultrasonic"
    Declaration: "frc::Ultrasonic #variable($Name){${Ping_Channel_Digital}, ${Echo_Channel_Digital}};"
  PowerDistribution:
    Defaults: "Component,None"
    ClassName: "PowerDistribution"
    Declaration: "frc::PowerDistribution #variable($Name)#if(($Module_Type) == \"Automatic\"){};#else{$CAN_ID, frc::PowerDistribution::ModuleType::k$Module_Type};#end"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"

  Motor Controller:
    Defaults: "PWMOutput,Component,None"
    ClassName: "MotorController"
    Declaration: "frc::${Type} #variable($Name){${Output_Channel_PWM}};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
    Import: "\\#include <frc/motorcontrol/${Type}.h>"
    Extra: >-
      #variable($Short_Name).SetInverted(${Inverted});
          #if(($Follow) != "None") #variable($Follow).AddFollower(#variable($Short_Name));#end
  Servo:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Servo"
    Declaration: "frc::${ClassName} #variable($Name){${Output_Channel_PWM}};"
  Digital Output:
    Defaults: "Component,None"
    ClassName: "DigitalOutput"
    Declaration: "frc::${ClassName} #variable($Name){${Output_Channel_Digital}};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
  Spike:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"
    Declaration: "frc::${ClassName} #variable($Name){${Output_Channel_Relay}};"
  Analog Output:
    Defaults: "AnalogOutput,Component,None"
    ClassName: "AnalogOutput"
    Declaration: "frc::${ClassName} #variable($Name){${Output_Channel_AnalogOutput}};"

  Compressor:
    Defaults: "Component,None"
    ClassName: "Compressor"
    Declaration: "frc::${ClassName} #variable($Name){${Module_ID}, frc::PneumaticsModuleType::${Module_Type}};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
    Import: "\\#include <frc/${ClassName}.h>\n\\#include <frc/PneumaticsModuleType.h>"
  Solenoid:
    Defaults: "SolenoidOutput,Component,None"
    ClassName: "Solenoid"
    Declaration: "frc::Solenoid #variable($Name){${Output_Module_Solenoid}, frc::PneumaticsModuleType::${Output_Module_Type_Solenoid}, ${Output_Channel_Solenoid}};"
    Import: "\\#include <frc/${ClassName}.h>\n\\#include <frc/PneumaticsModuleType.h>"
  Relay Solenoid:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"
    Declaration: "frc::Relay #variable($Name){${Output_Channel_Relay}};"

  Double Solenoid:
    Defaults: "Solenoid,Component,None"
    ClassName: "DoubleSolenoid"
    Declaration: "frc::DoubleSolenoid #variable($Name){${Forward_Module_Solenoid}, frc::PneumaticsModuleType::${Forward_Module_Type_Solenoid}, ${Forward_Channel_Solenoid}, ${Reverse_Channel_Solenoid}};"
    LiveWindow: "AddChild(\"$Short_Name\", &#variable($Name));"
    Import: "\\#include <frc/${ClassName}.h>\n\\#include <frc/PneumaticsModuleType.h>"

  Joystick:
    Defaults: "OI,None"
    ClassName: "Joystick"
    Construction: "frc::${ClassName} #variable($Name){${Number}};"
    Prototype: "frc::${ClassName}* get#class($Name)();"
    Function: >-
        frc::${ClassName}* RobotContainer::get#class($Name)() {
           return &#variable($Name);
        }
  Joystick Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "frc2::${ClassName} #variable($Name){&#variable($Joystick), ${Button}};"
    Import: "\\#include <frc2/command/button/${ClassName}.h>"
  Xbox Controller:
    Defaults: "OI,None"
    ClassName: "XboxController"
    Construction: "frc::${ClassName} #variable($Name){${Number}};"
    Prototype: "frc::${ClassName}* get#class($Name)();"
    Function: >-
        frc::${ClassName}* RobotContainer::get#class($Name)() {
           return &#variable($Name);
        }
  Xbox Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "frc2::${ClassName} #variable($Name){&#variable($Joystick), (int)frc::XboxController::Button::k${Button}};"
    Import: "\\#include <frc2/command/button/${ClassName}.h>"
  PS4 Controller:
    Defaults: "OI,None"
    ClassName: "PS4Controller"
    Construction: "frc::${ClassName} #variable($Name){${Number}};"
    Prototype: "frc::${ClassName}* get#class($Name)();"
    Function: >-
        frc::${ClassName}* RobotContainer::get#class($Name)() {
           return &#variable($Name);
        }
  PS4 Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "frc2::${ClassName} #variable($Name){&#variable($Joystick), (int)frc::PS4Controller::Button::k${Button}};"
    Import: "\\#include <frc2/command/button/${ClassName}.h>"
  POV Button:
    Defaults: "Button,OI,None"
    ClassName: "POVButton"
    Construction: "frc2::${ClassName} #variable($Name){&#variable($Joystick), ${Angle}, ${POVNumber}};"
    Import: "\\#include <frc2/command/button/${ClassName}.h>"

  Command:
    Defaults: "Command,None"
    ClassName: "frc2::Command"
  Sequential Command Group:
    Defaults: "Command,None"
  PID Command:
    Defaults: "Command,None"
  Setpoint Command:
    Defaults: "Command,None"
  Instant Command:
    Defaults: "Command,None"
  Wait Command:
    Defaults: "Command,None"
  Conditional Command:
    Defaults: "Command,None"
