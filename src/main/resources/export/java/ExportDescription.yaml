## This file describes the export from RobotBuilder to java. The
## format is YAML 1.1 (http://www.yaml.org/) with instructions that
## are post-processed with Velocity (velocity.apache.org).
##
## This is the actual exporter for java, but also serves as a good
## example of a complicated exporter.
##
## Name: The name of this exporter to be displayed in menus.
## Type: The type, this will affect where it is displayed.
## Toolbar: Whether or not it displays on the toolbar by default.
## Files: A YAML file pre-processed by velocity that describes which
##     files to export and how.
## Begin Modification: A string that indicates the beginning of an
##     area that will be modified and replaced by auto-generated code.
## End Modification: A string that indicates the end of an area
##     that will be modified and replaced by auto-generated code.
## Required Properties: A list of robot properties that must be filled
##     out for this export to actually begin export. If these are not
##     filled out, the export alerts the user and stops.
## Vars: A map of variable names to values that are available for the
##     entire export.
## Macros: A file containing the velocity macros for this export.
##
## Defaults: A map of default names to their instruction sets. The
##     instruction sets are a map of instruction names to instructions
##     that may contain velocity templating. These defaults are used
##     if component instructions do not specify a specific
##     instruction.
##
## Instructions: A map of palette components to their defaults and
##     instruction sets. The defaults are a comma-separated string
##     with the highest priority default first. The instructions
##     themselves vary from language to language, in the java
##     exporter:
##
##     - Export: The export instruction specifies the file to export
##           this component to.
##     - Import: The java import so that this component is properly
##           imported in the generated java file
##     - Declaration: The declaration to declare a variable
##           representing this component.
##     - Construction: The constructor to create this component.
##     - LiveWindow: Put this component on the livewindow properly.
##     - Extra: Extra configuration for after the constructor is done.
##     - ClassName: The java class name of this object.

Name: Java
Type: Code
Toolbar: true
Files: files.yaml
Begin Modification: // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
End Modification: // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
Required Properties:
  - Export Directory
  - Java Package

Vars:
  project_lang: java
  team_number: ${robot.getProperty('Team Number').getValue()}
  robot_name: ${robot.getName().replace(' ', '')}
  world_file: ${robot.getProperty('Simulation World File').getValue()}
  project: ${robot.getPropertyAbsolutePath('Export Directory')}$file_separator$robot_name
  use_default_package_p: ${robot.getProperty('Use Default Java Package').getValue()}
  package: "#if($use_default_package_p==true)frc.robot#else${robot.getProperty('Java Package').getValue()}#end"
  package_path: ${project}/src/main/java/${package.replace('.', '/')}

Macros: macros.vm

Post Export Action: "#Message:You have successfully exported. You can now open or import the project in VS Code and extend the generated code."

Instruction Names: ["Export", "Import", "Declaration", "Construction", "LiveWindow", "Extra", "Function", "PID", "ClassName"]

Defaults:
  Component:
    Export: "RobotMap"
    Import: "import edu.wpi.first.wpilibj.${ClassName};"
    Declaration: "private ${ClassName} #variable($Short_Name);"
  CustomComponent:
    Export: "RobotMap"
    Import: "import ${package}.${ClassName};"
    Declaration: "private ${ClassName} #variable($Short_Name);"
  None:
    Export: ""
    Import: ""
    Declaration: ""
    Construction: ""
    LiveWindow: ""
    Extra: ""
    Function: ""
    PID: "#variable($Short_Name).pidGet()"
    ClassName: ""
  AnalogInput:
    Construction: "#variable($Short_Name) = new ${ClassName}(${Input_Channel_Analog});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"
    PID: "#variable($Short_Name).getAverageVoltage()"
  AnalogPotentiometer:
    Construction: "#variable($Short_Name) = new ${ClassName}(${Input_Channel_Analog}, ${Full_Range}, ${Offset});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"
    PID: "#variable($Short_Name).get()"
  DigitalInput:
    Construction: "#variable($Short_Name) = new ${ClassName}(${Input_Channel_Digital});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"
  PWMOutput:
    Construction: "#variable($Short_Name) = new ${ClassName}(${Output_Channel_PWM});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"
  RelayOutput:
    Construction: "#variable($Short_Name) = new ${ClassName}(${Output_Channel_Relay});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"
  SolenoidOutput:
    Construction: "#variable($Short_Name) = new ${ClassName}(${Output_Module_Solenoid}, PneumaticsModuleType.${Output_Module_Type_Solenoid}, ${Output_Channel_Solenoid});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"
    Import: "import edu.wpi.first.wpilibj.${ClassName};\nimport edu.wpi.first.wpilibj.PneumaticsModuleType;"
  AnalogOutput:
    Construction: "#variable($Short_Name) = new ${ClassName}(${Output_Channel_AnalogOutput});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"
  OI:
    Export: "OI"
    Import: "import edu.wpi.first.wpilibj.${ClassName};\nimport ${package}.subsystems.*;"
    Declaration: "public ${ClassName} #variable($Name);"
  Button:
    Import: "import edu.wpi.first.wpilibj2.command.button.${ClassName};"
    Extra:  "#if(\"$Command\" != \"None\")#variable($Name).${When_to_Run}(#new_command_instantiation_nt(${Command} ${Parameters}));#end"
  Command:
    Export: ""
    Import: "import ${package}.commands.*;"

Instructions:
  Robot:
    Defaults: "None"
  Subsystems:
    Defaults: "None"
  OI:
    Defaults: "None"
  Commands:
    Defaults: "None"
  Subsystem:
    Defaults: "None"
    Export: "RobotContainer"
    Import: "import ${package}.subsystems.*;"
    Declaration: "private #class($Short_Name) #variable($Short_Name);"
    Construction: "#variable($Short_Name) = new #class($Short_Name)();"
    ClassName: "SubsystemBase"
  PID Subsystem:
    Defaults: "None"
    Export: "RobotContainer"
    Import: "import ${package}.subsystems.*;"
    Declaration: "private #class($Short_Name) #variable($Short_Name);"
    Construction: "#variable($Short_Name) = new #class($Short_Name)();"
    ClassName: "PIDSubsystem"
  PID Controller:
    Defaults: "Component,None"
    ClassName: "PIDController"
    Import: "import edu.wpi.first.wpilibj.smartdashboard.*;\nimport edu.wpi.first.math.controller.PIDController;"
    Construction: "#variable($Short_Name) = new ${ClassName}($P, $I, $D, $Period);"
    Extra: >
      #if($Continuous)
              #variable($Short_Name).enableContinuousInput(${Minimum_Input}, ${Maximum_Input});
      #end
              #variable($Short_Name).setTolerance(${Tolerance});

      #if($Send_to_SmartDashboard)

              SmartDashboard.putData("${Name}", #variable($Short_Name));#end

    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"

  Differential Drive:
    Defaults: "Component,None"
    ClassName: "DifferentialDrive"
    Import: "import edu.wpi.first.wpilibj.drive.DifferentialDrive;"
    Construction: "#variable($Short_Name) = new ${ClassName}(#variable($Left_Motor), #variable($Right_Motor));"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
    Extra: >
      #variable($Short_Name).setSafetyEnabled($Safety_Enabled);
              #variable($Short_Name).setExpiration($Safety_Expiration_Time);
              #variable($Short_Name).setMaxOutput($Maximum_Output);
  Mecanum Drive:
    Defaults: "Component,None"
    ClassName: "MecanumDrive"
    Import: "import edu.wpi.first.wpilibj.drive.MecanumDrive;"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
    Construction: >-
      #variable($Short_Name) = new ${ClassName}(#variable($Left_Front_Motor), #variable($Left_Rear_Motor),
                    #variable($Right_Front_Motor), #variable($Right_Rear_Motor));
    Extra: >
      #variable($Short_Name).setSafetyEnabled($Safety_Enabled);
              #variable($Short_Name).setExpiration($Safety_Expiration_Time);
              #variable($Short_Name).setMaxOutput($Maximum_Output);

  AnalogGyro:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogGyro"
    Extra: "#variable($Short_Name).setSensitivity(${Sensitivity});"
    PID: "#variable($Short_Name).getAngle()"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
  AnalogAccelerometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogAccelerometer"
    PID: "#variable($Short_Name).getAcceleration()"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
    Extra: >-
      #variable($Short_Name).setSensitivity(${Volts_Per_G});
              #variable($Short_Name).setZero(${Zero_G_Volts});
  Quadrature Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Import: "import edu.wpi.first.wpilibj.Encoder;\nimport edu.wpi.first.wpilibj.CounterBase.EncodingType;"
    Construction: "#variable($Short_Name) = new ${ClassName}(${Channel_A_Channel_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}, EncodingType.${Encoding_Type});"
    PID: "#if(($PID_Source) == \"kDisplacement\") #variable($Short_Name).getDistance()#else #variable($Short_Name).getRate()#end"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
    Extra: >-
      #variable($Short_Name).setDistancePerPulse(${Distance_Per_Pulse});
  Indexed Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Import: "import edu.wpi.first.wpilibj.Encoder;\nimport edu.wpi.first.wpilibj.CounterBase.EncodingType;\nimport edu.wpi.first.wpilibj.Encoder.IndexingType;"
    Construction: "#variable($Short_Name) = new ${ClassName}(${Channel_A_Channel_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction});"
    PID: "#if(($PID_Source) == \"kDisplacement\") #variable($Short_Name).getDistance()#else #variable($Short_Name).getRate()#end"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
    Extra: >-
      #variable($Short_Name).setDistancePerPulse(${Distance_Per_Pulse});
              #variable($Short_Name).setIndexSource(${Index_Channel_Digital}, IndexingType.${Indexing_Type});
  Analog Potentiometer:
    Defaults: "AnalogPotentiometer,Component,None"
    ClassName: "AnalogPotentiometer"
  Analog Input:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogInput"
  Limit Switch:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Digital Input:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Ultrasonic:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Ultrasonic"
    Construction: "#variable($Short_Name) = new ${ClassName}(${Ping_Channel_Digital}, ${Echo_Channel_Digital});"
  PowerDistribution:
    Defaults: "Component,None"
    ClassName: "PowerDistribution"
    Import: "import edu.wpi.first.wpilibj.PowerDistribution.ModuleType;\nimport edu.wpi.first.wpilibj.PowerDistribution;"
    Construction: "#if(($Module_Type) == \"Automatic\") #variable($Short_Name) = new ${ClassName}();#else #variable($Short_Name) = new ${ClassName}($CAN_ID, ModuleType.k$Module_Type);#end"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"

  Motor Controller:
    Defaults: "PWMOutput,Component,None"
    ClassName: "MotorController"
    Import: "import edu.wpi.first.wpilibj.motorcontrol.${Type};"
    Declaration: "private ${Type} #variable($Short_Name);"
    Construction: "#variable($Short_Name) = new ${Type}(${Output_Channel_PWM});"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
    Extra: >-
      #if(($Follow) != "None")
          #variable($Follow).addFollower(#variable($Short_Name));
      #end
        #variable($Short_Name).setInverted(${Inverted});
  Servo:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Servo"
  Digital Output:
    Defaults: "Component,None"
    ClassName: "DigitalOutput"
    Construction: "#variable($Short_Name) = new ${ClassName}(${Output_Channel_Digital});"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
  Spike:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"
  Analog Output:
    Defaults: "AnalogOutput,Component,None"
    ClassName: "AnalogOutput"

  Compressor:
    Defaults: "Component,None"
    ClassName: "Compressor"
    Construction: "#variable($Short_Name) = new ${ClassName}(${Module_ID}, PneumaticsModuleType.${Module_Type});"
    LiveWindow: "addChild(\"$Short_Name\",#variable($Short_Name));"
    Import: "import edu.wpi.first.wpilibj.${ClassName};\nimport edu.wpi.first.wpilibj.PneumaticsModuleType;"
  Solenoid:
    Defaults: "SolenoidOutput,Component,None"
    ClassName: "Solenoid"
  Relay Solenoid:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"
  Double Solenoid:
    Defaults: "SolenoidOutput,Component,None"
    ClassName: "DoubleSolenoid"
    Construction: "#variable($Short_Name) = new ${ClassName}(${Forward_Module_Solenoid}, PneumaticsModuleType.${Forward_Module_Type_Solenoid}, ${Forward_Channel_Solenoid}, ${Reverse_Channel_Solenoid});"
    LiveWindow: "addChild(\"$Short_Name\", #variable($Short_Name));"

  Joystick:
    Defaults: "OI,None"
    ClassName: "Joystick"
    Construction: "private final ${ClassName} #variable($Name) = new ${ClassName}(${Number});"
    Function: >-
      public ${ClassName} get#class($Name)() {
              return #variable($Name);
          }
  Joystick Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "final ${ClassName} #variable($Name) = new ${ClassName}(#variable($Joystick), ${Button});"
  Xbox Controller:
    Defaults: "OI,None"
    ClassName: "XboxController"
    Construction: "private final ${ClassName} #variable($Name) = new ${ClassName}(${Number});"
    Function: >-
      public ${ClassName} get#class($Name)() {
            return #variable($Name);
          }
  Xbox Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "final ${ClassName} #variable($Name) = new ${ClassName}(#variable($Joystick), XboxController.Button.k${Button}.value);"
  PS4 Controller:
    Defaults: "OI,None"
    ClassName: "PS4Controller"
    Construction: "private final ${ClassName} #variable($Name) = new ${ClassName}(${Number});"
    Function: >-
      public ${ClassName} get#class($Name)() {
            return #variable($Name);
          }
  PS4 Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "final ${ClassName} #variable($Name) = new ${ClassName}(#variable($Joystick), PS4Controller.Button.k${Button}.value);"
  POV Button:
    Defaults: "Button,OI,None"
    ClassName: "POVButton"
    Construction: "final ${ClassName} #variable($Name) = new ${ClassName}(#variable($Joystick), ${Angle}, ${POVNumber});"

  Command:
    Defaults: "Command,None"
  Command Group:
    Defaults: "Command,None"
  Sequential Command Group:
    Defaults: "Command,None"
  PID Command:
    Defaults: "Command,None"
  Setpoint Command:
    Defaults: "Command,None"
  Wait Command:
    Defaults: "Command,None"
  ##Timed Command:
  ##  Defaults: "Command,None"
  Instant Command:
    Defaults: "Command,None"
  Conditional Command:
    Defaults: "Command,None"
